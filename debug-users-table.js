// Debug Users Table Script
// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö

const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  database: 'emr_system',
  user: 'postgres',
  password: 'password'
});

async function debugUsersTable() {
  try {
    console.log('üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á users...');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const totalUsersResult = await pool.query('SELECT COUNT(*) as count FROM users');
    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalUsersResult.rows[0].count}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ role
    const rolesResult = await pool.query(`
      SELECT role, COUNT(*) as count 
      FROM users 
      GROUP BY role 
      ORDER BY count DESC
    `);
    
    console.log('\nüìã ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° role:');
    rolesResult.rows.forEach(row => {
      console.log(`  - ${row.role}: ${row.count} ‡∏Ñ‡∏ô`);
    });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ national_id
    const nationalIdResult = await pool.query(`
      SELECT COUNT(*) as count 
      FROM users 
      WHERE national_id IS NOT NULL AND national_id != ''
    `);
    console.log(`\nüÜî ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: ${nationalIdResult.rows[0].count}`);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const sampleUsersResult = await pool.query(`
      SELECT id, username, email, first_name, last_name, national_id, role, created_at
      FROM users 
      ORDER BY created_at DESC 
      LIMIT 5
    `);
    
    console.log('\nüë• ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:');
    sampleUsersResult.rows.forEach((user, index) => {
      console.log(`  ${index + 1}. ID: ${user.id}`);
      console.log(`     Username: ${user.username}`);
      console.log(`     Name: ${user.first_name} ${user.last_name}`);
      console.log(`     Email: ${user.email}`);
      console.log(`     National ID: ${user.national_id || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
      console.log(`     Role: ${user.role}`);
      console.log(`     Created: ${user.created_at}`);
      console.log('     ---');
    });
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ role = patient
    const patientCountResult = await pool.query(`
      SELECT COUNT(*) as count 
      FROM users 
      WHERE role = 'patient'
    `);
    
    if (patientCountResult.rows[0].count === 0) {
      console.log('\n‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ role = patient');
      console.log('üõ†Ô∏è  ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö...');
      
      const bcrypt = require('bcryptjs');
      const hashedPassword = await bcrypt.hash('password123', 10);
      
      const testUserResult = await pool.query(`
        INSERT INTO users (
          username, email, password_hash, first_name, last_name, 
          thai_name, thai_last_name, national_id, birth_date, gender,
          phone, address, blood_type, role, is_active, email_verified, 
          profile_completed, created_at, updated_at
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19)
        RETURNING id, username, email, first_name, last_name, national_id, role
      `, [
        'test_patient_' + Date.now(),
        'testpatient@example.com',
        hashedPassword,
        'Test',
        'Patient',
        '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        '‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢',
        '1234567890123',
        '1990-01-01',
        'male',
        '0812345678',
        '123 ‡∏ñ‡∏ô‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        'A+',
        'patient',
        true,
        true,
        true,
        new Date(),
        new Date()
      ]);
      
      console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
      const testUser = testUserResult.rows[0];
      console.log(`   ID: ${testUser.id}`);
      console.log(`   Username: ${testUser.username}`);
      console.log(`   Name: ${testUser.first_name} ${testUser.last_name}`);
      console.log(`   National ID: ${testUser.national_id}`);
      console.log(`   Role: ${testUser.role}`);
      console.log(`   Email: ${testUser.email}`);
      console.log(`   Password: password123`);
    } else {
      console.log(`\n‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ role = patient ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${patientCountResult.rows[0].count} ‡∏Ñ‡∏ô`);
    }
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await pool.end();
  }
}

debugUsersTable();
