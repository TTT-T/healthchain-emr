services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: emr_postgres
    environment:
      POSTGRES_DB: emr_development
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - emr_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: emr_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - emr_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: emr_backend
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: emr_development
      DB_USER: postgres
      DB_PASSWORD: 12345
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production-2025
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-this-in-production-2025
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - emr_network
    restart: unless-stopped
    command: npm run dev

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: emr_frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001/api
      NEXT_PUBLIC_APP_URL: http://localhost:3000
      NEXT_PUBLIC_BACKEND_URL: http://localhost:3001
      BACKEND_URL: http://backend:3001
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - emr_network
    restart: unless-stopped
    command: npm run dev

volumes:
  postgres_data:
  redis_data:

networks:
  emr_network:
    driver: bridge
