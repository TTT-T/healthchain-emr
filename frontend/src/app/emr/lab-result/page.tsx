"use client";
import { useState, useEffect } from "react";
import Link from "next/link";
import { useAuth } from '@/contexts/AuthContext';
import { PatientService } from '@/services/patientService';
import { LabService } from '@/services/labService';
import { VisitService } from '@/services/visitService';
import { MedicalLabOrder, CreateLabOrderRequest } from '@/types/api';
import { Search, FileText, Plus, Trash2, CheckCircle, AlertCircle, Clock, User } from 'lucide-react';

interface Patient {
  hn: string;
  nationalId: string;
  thaiName: string;
  gender: string;
  birthDate: string;
  queueNumber: string;
  treatmentType: string;
  assignedDoctor: string;
}

interface LabTest {
  id: string;
  testName: string;
  testCategory: string;
  priority: 'routine' | 'urgent' | 'stat';
  status: 'pending' | 'collected' | 'processing' | 'completed' | 'cancelled';
  orderedBy: string;
  orderedDate: string;
  notes?: string;
}

export default function LabResultPage() {
  const { user, isAuthenticated } = useAuth();
  const [searchQuery, setSearchQuery] = useState("");
  const [searchType, setSearchType] = useState<"hn" | "queue">("queue");
  const [isSearching, setIsSearching] = useState(false);
  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [labTests, setLabTests] = useState<LabTest[]>([]);
  const [newTest, setNewTest] = useState<Partial<LabTest>>({
    testName: "",
    testCategory: "blood",
    priority: "routine",
    notes: ""
  });

  const handleSearch = async () => {
    if (!searchQuery.trim()) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤");
      return;
    }

    setIsSearching(true);
    setError(null);
    setSuccess(null);
    
    try {
      console.log(`üîç Searching for patient by ${searchType}:`, searchQuery);
      
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏à‡∏≤‡∏Å API
      const response = await PatientService.searchPatients(searchQuery, searchType);
      
      if (response.data && response.data.length > 0) {
        const patient = response.data[0];
        
        // Map ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏à‡∏≤‡∏Å API response
        const mappedPatient: Patient = {
          hn: patient.hn,
          nationalId: patient.national_id || '',
          thaiName: patient.thai_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠',
          gender: patient.gender || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
          birthDate: patient.birth_date || '',
          queueNumber: 'Q001', // Default queue number
          treatmentType: 'OPD - ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', // Default treatment
          assignedDoctor: '‡∏ô‡∏û.‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡∏ß‡∏á‡∏®‡πå‡πÅ‡∏û‡∏ó‡∏¢‡πå' // Default doctor
        };

        setSelectedPatient(mappedPatient);
        setSuccess('‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
        console.log('‚úÖ Patient found:', mappedPatient);
      } else {
        setSelectedPatient(null);
        setError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      }
      
    } catch (error: any) {
      console.error('‚ùå Error searching patient:', error);
      setError(error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
      setSelectedPatient(null);
    } finally {
      setIsSearching(false);
    }
  };

  const addLabTest = () => {
    if (!newTest.testName) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à");
      return;
    }

    const test: LabTest = {
      id: Date.now().toString(),
      testName: newTest.testName!,
      testCategory: newTest.testCategory!,
      priority: newTest.priority!,
      status: 'pending',
      orderedBy: user?.thai_name || '‡πÅ‡∏û‡∏ó‡∏¢‡πå',
      orderedDate: new Date().toISOString().slice(0, 16),
      notes: newTest.notes
    };

    setLabTests(prev => [...prev, test]);
    setNewTest({
      testName: "",
      testCategory: "blood",
      priority: "routine",
      notes: ""
    });
  };

  const removeLabTest = (id: string) => {
    setLabTests(prev => prev.filter(test => test.id !== id));
  };

  const handleSubmit = async () => {
    if (!selectedPatient || labTests.length === 0) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à");
      return;
    }

    setIsSubmitting(true);
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á visit ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ)
      const visitData = {
        patientId: selectedPatient.hn, // ‡∏à‡∏∞‡πÉ‡∏ä‡πâ HN ‡∏´‡∏≤ patient ID
        visitType: 'walk_in' as const,
        chiefComplaint: '‡∏™‡∏±‡πà‡∏á‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πá‡∏ö',
        priority: 'normal' as const
      };
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á visit
      const visitResponse = await VisitService.createVisit(visitData);
      
      if (!visitResponse.success || !visitResponse.data) {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á visit ‡πÑ‡∏î‡πâ');
      }
      
      const visit = visitResponse.data;
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á lab orders ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ test
      for (const test of labTests) {
        const labOrderData: CreateLabOrderRequest = {
          patientId: selectedPatient.hn,
          visitId: visit.id,
          testCategory: test.testCategory as 'blood' | 'urine' | 'stool' | 'imaging' | 'other',
          testName: test.testName,
          orderedBy: user?.id || 'doctor',
          priority: test.priority,
          notes: test.notes
        };

        const labResponse = await LabService.createLabOrder(labOrderData);
        
        if (!labResponse.success) {
          console.error(`Failed to create lab order for ${test.testName}:`, labResponse.errors);
        }
      }

      setSuccess("‡∏™‡∏±‡πà‡∏á‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πá‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      
      // Reset form
      setTimeout(() => {
        setSelectedPatient(null);
        setSearchQuery("");
        setLabTests([]);
        setSuccess(null);
      }, 3000);
      
    } catch (error: any) {
      console.error("Error creating lab orders:", error);
      setError(error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
    } finally {
      setIsSubmitting(false);
    }
  };

  const calculateAge = (birthDate: string): number => {
    const today = new Date();
    const birth = new Date(birthDate);
    let age = today.getFullYear() - birth.getFullYear();
    const monthDiff = today.getMonth() - birth.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
      age--;
    }
    
    return age;
  };

  const getPriorityColor = (priority: string): string => {
    switch (priority) {
      case 'routine': return 'text-green-600 bg-green-100';
      case 'urgent': return 'text-orange-600 bg-orange-100';
      case 'stat': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getStatusColor = (status: string): string => {
    switch (status) {
      case 'pending': return 'text-yellow-600 bg-yellow-100';
      case 'collected': return 'text-blue-600 bg-blue-100';
      case 'processing': return 'text-orange-600 bg-orange-100';
      case 'completed': return 'text-green-600 bg-green-100';
      case 'cancelled': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</h1>
          <Link href="/login" className="text-blue-600 hover:text-blue-800">
            ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-sm p-6 mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πá‡∏ö</h1>
              <p className="text-gray-600 mt-1">‡∏™‡∏±‡πà‡∏á‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•</p>
            </div>
            <div className="flex space-x-4">
              <Link href="/emr/dashboard" className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">
                ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
              </Link>
            </div>
          </div>
        </div>

        {/* Success/Error Messages */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4 flex items-center">
            <AlertCircle className="h-4 w-4 mr-2" />
            {error}
          </div>
        )}

        {success && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4 flex items-center">
            <CheckCircle className="h-4 w-4 mr-2" />
            {success}
          </div>
        )}

        {/* Search Section */}
        <div className="bg-white rounded-lg shadow-sm p-6 mb-8">
          <div className="flex items-center mb-4">
            <Search className="h-5 w-5 text-gray-400 mr-2" />
            <h2 className="text-lg font-semibold text-gray-900">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢</h2>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</label>
              <select
                value={searchType}
                onChange={(e) => setSearchType(e.target.value as "hn" | "queue")}
                className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="queue">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß</option>
                <option value="hn">HN</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {searchType === "hn" ? "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç HN" : "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß"}
              </label>
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder={searchType === "hn" ? "‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç HN" : "‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß"}
              />
            </div>
            
            <div className="flex items-end">
              <button
                onClick={handleSearch}
                disabled={isSearching || !searchQuery.trim()}
                className={`px-6 py-3 rounded-lg font-medium transition-all ${
                  isSearching || !searchQuery.trim()
                    ? 'bg-gray-400 text-white cursor-not-allowed'
                    : 'bg-blue-600 text-white hover:bg-blue-700'
                }`}
              >
                {isSearching ? (
                  <div className="flex items-center">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...
                  </div>
                ) : (
                  <div className="flex items-center">
                    <Search className="h-4 w-4 mr-2" />
                    ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                  </div>
                )}
              </button>
            </div>
          </div>
        </div>

        {/* Patient Information */}
        {selectedPatient && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow-sm p-6">
              <div className="flex items-center mb-4">
                <User className="h-5 w-5 text-gray-400 mr-2" />
                <h3 className="text-lg font-semibold text-gray-900">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢</h3>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">‡∏Ñ‡∏¥‡∏ß</label>
                  <p className="text-sm text-gray-900">{selectedPatient.queueNumber}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">HN</label>
                  <p className="text-sm text-gray-900">{selectedPatient.hn}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
                  <p className="text-sm text-gray-900">{selectedPatient.thaiName}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">‡∏≠‡∏≤‡∏¢‡∏∏</label>
                  <p className="text-sm text-gray-900">{calculateAge(selectedPatient.birthDate)} ‡∏õ‡∏µ</p>
                </div>
              </div>
            </div>

            {/* Lab Orders Form */}
            <div className="bg-white rounded-lg shadow-sm p-6">
              <div className="flex items-center mb-4">
                <FileText className="h-5 w-5 text-gray-400 mr-2" />
                <h3 className="text-lg font-semibold text-gray-900">‡∏™‡∏±‡πà‡∏á‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πá‡∏ö</h3>
              </div>
              
              <div className="space-y-6">
                {/* Add New Test */}
                <div className="border border-gray-200 rounded-lg p-4">
                  <h4 className="text-md font-medium text-gray-900 mb-4">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏´‡∏°‡πà</h4>
                  
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à</label>
                      <input
                        type="text"
                        value={newTest.testName || ""}
                        onChange={(e) => setNewTest(prev => ({ ...prev, testName: e.target.value }))}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô CBC, FBS, UA"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</label>
                      <select
                        value={newTest.testCategory || "blood"}
                        onChange={(e) => setNewTest(prev => ({ ...prev, testCategory: e.target.value }))}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      >
                        <option value="blood">‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏î</option>
                        <option value="urine">‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞</option>
                        <option value="stool">‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏∏‡∏à‡∏à‡∏≤‡∏£‡∏∞</option>
                        <option value="imaging">‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏≤‡∏á‡∏†‡∏≤‡∏û</option>
                        <option value="other">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
                      </select>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç</label>
                      <select
                        value={newTest.priority || "routine"}
                        onChange={(e) => setNewTest(prev => ({ ...prev, priority: e.target.value as any }))}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      >
                        <option value="routine">‡∏õ‡∏Å‡∏ï‡∏¥</option>
                        <option value="urgent">‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô</option>
                        <option value="stat">‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô</option>
                      </select>
                    </div>
                    
                    <div className="flex items-end">
                      <button
                        onClick={addLabTest}
                        className="px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                      >
                        <Plus className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                  
                  <div className="mt-4">
                    <label className="block text-sm font-medium text-gray-700 mb-2">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</label>
                    <input
                      type="text"
                      value={newTest.notes || ""}
                      onChange={(e) => setNewTest(prev => ({ ...prev, notes: e.target.value }))}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
                    />
                  </div>
                </div>

                {/* Lab Tests List */}
                {labTests.length > 0 && (
                  <div>
                    <h4 className="text-md font-medium text-gray-900 mb-4">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á</h4>
                    <div className="space-y-2">
                      {labTests.map((test) => (
                        <div key={test.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <div className="grid grid-cols-4 gap-4 flex-1">
                            <span className="text-sm font-medium">{test.testName}</span>
                            <span className="text-sm">{test.testCategory}</span>
                            <span className={`text-sm px-2 py-1 rounded ${getPriorityColor(test.priority)}`}>
                              {test.priority}
                            </span>
                            <span className={`text-sm px-2 py-1 rounded ${getStatusColor(test.status)}`}>
                              {test.status}
                            </span>
                          </div>
                          <button
                            onClick={() => removeLabTest(test.id)}
                            className="ml-4 text-red-600 hover:text-red-800"
                          >
                            <Trash2 className="h-4 w-4" />
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Submit Button */}
            <div className="flex justify-end space-x-4">
              <button
                onClick={() => {
                  setSelectedPatient(null);
                  setSearchQuery("");
                  setLabTests([]);
                }}
                className="px-6 py-3 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              <button
                onClick={handleSubmit}
                disabled={isSubmitting || labTests.length === 0}
                className={`px-6 py-3 rounded-lg font-medium transition-all ${
                  isSubmitting || labTests.length === 0
                    ? 'bg-gray-400 text-white cursor-not-allowed'
                    : 'bg-blue-600 text-white hover:bg-blue-700'
                }`}
              >
                {isSubmitting ? (
                  <div className="flex items-center">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
                  </div>
                ) : (
                  '‡∏™‡∏±‡πà‡∏á‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πá‡∏ö'
                )}
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
