version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: emr_postgres
    environment:
      POSTGRES_DB: emr_development
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/migrations:/docker-entrypoint-initdb.d
    networks:
      - emr_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: emr_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - emr_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: emr_backend
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: emr_development
      DB_USER: postgres
      DB_PASSWORD: 12345
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: emr-super-secret-jwt-key-2025-development
      JWT_REFRESH_SECRET: emr-super-secret-refresh-key-2025-development
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: demo@example.com
      SMTP_PASSWORD: demo-password
      EMAIL_FROM: demo@example.com
      FRONTEND_URL: http://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - emr_network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 10 &&
        echo 'Installing dependencies...' &&
        npm install &&
        echo 'Running migrations...' &&
        npm run migrate &&
        echo 'Starting backend server...' &&
        npm run dev
      "

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: emr_frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001/api
      NEXT_PUBLIC_APP_URL: http://localhost:3000
      NEXT_PUBLIC_APP_NAME: EMR System
      NEXT_PUBLIC_APP_VERSION: 1.0.0
      NEXT_PUBLIC_ENABLE_AI_FEATURES: true
      NEXT_PUBLIC_ENABLE_NOTIFICATIONS: true
      NEXT_PUBLIC_ENABLE_WEBSOCKET: true
      NEXT_PUBLIC_DEBUG_MODE: true
      NEXT_PUBLIC_LOG_LEVEL: info
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      backend:
        condition: service_started
    networks:
      - emr_network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Installing frontend dependencies...' &&
        npm install &&
        echo 'Starting frontend server...' &&
        npm run dev
      "

volumes:
  postgres_data:
  redis_data:

networks:
  emr_network:
    driver: bridge
