import { databaseManager } from '../database/connection';
import { logger } from '../utils/logger';

export interface PatientNotificationData {
  patientId: string;
  patientHn: string;
  patientName: string;
  patientPhone?: string;
  patientEmail?: string;
  notificationType: 'document_created' | 'record_updated' | 'appointment_created' | 'lab_result_ready' | 'prescription_ready';
  title: string;
  message: string;
  recordType?: string;
  recordId?: string;
  createdBy: string;
  createdByName: string;
  metadata?: any;
}

export class NotificationService {
  /**
   * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
   */
  static async sendPatientNotification(data: PatientNotificationData): Promise<void> {
    try {
      logger.info('Sending patient notification', {
        patientId: data.patientId,
        patientHn: data.patientHn,
        notificationType: data.notificationType
      });

      // 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await this.saveNotificationToDatabase(data);

      // 2. ‡∏™‡πà‡∏á SMS (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå)
      if (data.patientPhone) {
        await this.sendSMS(data);
      }

      // 3. ‡∏™‡πà‡∏á Email (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•)
      if (data.patientEmail) {
        await this.sendEmail(data);
      }

      // 4. ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
      await this.sendInAppNotification(data);

      logger.info('Patient notification sent successfully', {
        patientId: data.patientId,
        notificationType: data.notificationType
      });
    } catch (error) {
      logger.error('Failed to send patient notification:', error);
      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
    }
  }

  /**
   * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   */
  private static async saveNotificationToDatabase(data: PatientNotificationData): Promise<void> {
    try {
      const notificationId = require('uuid').v4();
      
      await databaseManager.query(
        `INSERT INTO notifications (
          id, patient_id, notification_type, title, message, 
          record_type, record_id, created_by, metadata, 
          created_at, updated_at
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, NOW() AT TIME ZONE 'Asia/Bangkok', NOW() AT TIME ZONE 'Asia/Bangkok')`,
        [
          notificationId,
          data.patientId,
          data.notificationType,
          data.title,
          data.message,
          data.recordType || null,
          data.recordId || null,
          data.createdBy,
          JSON.stringify(data.metadata || {})
        ]
      );

      logger.info('Notification saved to database', { notificationId });
    } catch (error) {
      logger.error('Failed to save notification to database:', error);
    }
  }

  /**
   * ‡∏™‡πà‡∏á SMS ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
   */
  private static async sendSMS(data: PatientNotificationData): Promise<void> {
    try {
      const smsMessage = this.generateSMSMessage(data);
      
      // ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö SMS Gateway
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 500));
      
      logger.info('SMS notification sent', { 
        patientId: data.patientId,
        phone: data.patientPhone?.substring(0, 3) + '***'
      });
    } catch (error) {
      logger.error('Failed to send SMS:', error);
    }
  }

  /**
   * ‡∏™‡πà‡∏á Email ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
   */
  private static async sendEmail(data: PatientNotificationData): Promise<void> {
    try {
      const emailData = {
        to: data.patientEmail,
        subject: data.title,
        html: this.generateEmailTemplate(data)
      };
      
      // ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Email Service
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 500));
      
      logger.info('Email notification sent', { 
        patientId: data.patientId,
        email: data.patientEmail?.substring(0, 3) + '***'
      });
    } catch (error) {
      logger.error('Failed to send email:', error);
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
   */
  private static async sendInAppNotification(data: PatientNotificationData): Promise<void> {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö real-time notification
      const notificationEvent = {
        id: `notif-${Date.now()}`,
        patientId: data.patientId,
        patientHn: data.patientHn,
        type: data.notificationType,
        title: data.title,
        message: data.message,
        recordType: data.recordType,
        recordId: data.recordId,
        createdBy: data.createdBy,
        createdByName: data.createdByName,
        createdAt: new Date().toISOString(),
        read: false,
        metadata: data.metadata
      };

      // ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ WebSocket ‡∏´‡∏£‡∏∑‡∏≠ Server-Sent Events
      logger.info('In-app notification sent', { 
        patientId: data.patientId,
        notificationType: data.notificationType
      });
    } catch (error) {
      logger.error('Failed to send in-app notification:', error);
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° SMS
   */
  private static generateSMSMessage(data: PatientNotificationData): string {
    const hospitalName = '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á';
    const timestamp = new Date().toLocaleString('th-TH');
    
    switch (data.notificationType) {
      case 'document_created':
        return `üè• ${hospitalName}\n‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà: ${data.title}\n‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${data.patientName}\n‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢: ${data.createdByName}\n‡πÄ‡∏ß‡∏•‡∏≤: ${timestamp}`;
      
      case 'record_updated':
        return `üè• ${hospitalName}\n‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${data.title}\n‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${data.patientName}\n‡πÇ‡∏î‡∏¢: ${data.createdByName}\n‡πÄ‡∏ß‡∏•‡∏≤: ${timestamp}`;
      
      case 'appointment_created':
        return `üè• ${hospitalName}\n‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà: ${data.title}\n‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${data.patientName}\n‡πÇ‡∏î‡∏¢: ${data.createdByName}\n‡πÄ‡∏ß‡∏•‡∏≤: ${timestamp}`;
      
      case 'lab_result_ready':
        return `üè• ${hospitalName}\n‡∏ú‡∏•‡πÅ‡∏•‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°: ${data.title}\n‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${data.patientName}\n‡πÄ‡∏ß‡∏•‡∏≤: ${timestamp}`;
      
      case 'prescription_ready':
        return `üè• ${hospitalName}\n‡∏¢‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°: ${data.title}\n‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${data.patientName}\n‡πÄ‡∏ß‡∏•‡∏≤: ${timestamp}`;
      
      default:
        return `üè• ${hospitalName}\n${data.title}\n‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${data.patientName}\n‡πÄ‡∏ß‡∏•‡∏≤: ${timestamp}`;
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á Email Template
   */
  private static generateEmailTemplate(data: PatientNotificationData): string {
    const timestamp = new Date().toLocaleString('th-TH');
    const hospitalName = '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á';
    
    return `
      <!DOCTYPE html>
      <html lang="th">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${data.title}</title>
        <style>
          body { font-family: 'Sarabun', Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background-color: #f5f5f5; }
          .container { max-width: 600px; margin: 0 auto; background-color: white; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }
          .header h1 { margin: 0; font-size: 24px; }
          .content { padding: 30px; }
          .info-box { background-color: #f8f9fa; border-left: 4px solid #667eea; padding: 20px; margin: 20px 0; border-radius: 5px; }
          .info-box h3 { margin-top: 0; color: #667eea; }
          .footer { background-color: #f8f9fa; padding: 20px; text-align: center; color: #666; font-size: 14px; }
          .highlight { background-color: #fff3cd; padding: 15px; border-radius: 5px; margin: 15px 0; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üè• ${hospitalName}</h1>
            <h2>${data.title}</h2>
          </div>
          
          <div class="content">
            <p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ñ‡∏∏‡∏ì ${data.patientName}</p>
            
            <div class="highlight">
              <p><strong>${data.message}</strong></p>
            </div>
            
            <div class="info-box">
              <h3>üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h3>
              <p><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</strong> ${this.getNotificationTypeLabel(data.notificationType)}</p>
              <p><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</strong> ${timestamp}</p>
              <p><strong>‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:</strong> ${data.createdByName}</p>
              ${data.recordType ? `<p><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</strong> ${data.recordType}</p>` : ''}
            </div>
            
            <div class="info-box">
              <h3>üì± ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</h3>
              <p>‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</p>
              <p>‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: 02-xxx-xxxx</p>
              <p>‡∏≠‡∏µ‡πÄ‡∏°‡∏•: info@hospital.example.com</p>
            </div>
          </div>
          
          <div class="footer">
            <p>${hospitalName} | ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå</p>
            <p>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢: ${data.createdByName} | ${timestamp}</p>
          </div>
        </div>
      </body>
      </html>
    `;
  }

  /**
   * ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
   */
  private static getNotificationTypeLabel(type: string): string {
    const labels: { [key: string]: string } = {
      'document_created': '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà',
      'record_updated': '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      'appointment_created': '‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà',
      'lab_result_ready': '‡∏ú‡∏•‡πÅ‡∏•‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°',
      'prescription_ready': '‡∏¢‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°'
    };
    
    return labels[type] || '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô';
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
   */
  static async getPatientNotifications(patientId: string, limit: number = 50): Promise<any[]> {
    try {
      const result = await databaseManager.query(
        `SELECT * FROM notifications 
         WHERE patient_id = $1 
         ORDER BY created_at DESC 
         LIMIT $2`,
        [patientId, limit]
      );

      return result.rows;
    } catch (error) {
      logger.error('Failed to get patient notifications:', error);
      return [];
    }
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
   */
  static async markNotificationAsRead(notificationId: string): Promise<void> {
    try {
      await databaseManager.query(
        `UPDATE notifications 
         SET read_at = NOW(), updated_at = NOW() 
         WHERE id = $1`,
        [notificationId]
      );

      logger.info('Notification marked as read', { notificationId });
    } catch (error) {
      logger.error('Failed to mark notification as read:', error);
    }
  }
}
